// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // si usás otro (mysql/sqlserver/sqlite/mongodb), avisá y te lo adapto
  url      = env("DATABASE_URL")
}

/**
 * Esquema base para NextAuth (Prisma Adapter)
 * Docs oficiales: https://authjs.dev/reference/adapter/prisma
 * Compatible con @next-auth/prisma-adapter y NextAuth v4
 */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Relaciones NextAuth
  accounts      Account[]
  sessions      Session[]

  // (Opcional) Campos de tu app
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  ADMIN
  CT
  MEDICO
  JUGADOR
  DIRECTIVO
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  // para OAuth 2.1 si aplica
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * (Opcional) Blog/post para tu landing si luego querés persistir entradas.
 * Si no lo vas a usar ahora, podés dejarlo: no afecta.
 */
model Post {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  excerpt   String?
  body      String?  // podrías guardar JSON/MDX serializado
  tags      String[] // PostgreSQL array
  author    String?
  cover     String?
  published Boolean  @default(false)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
